#include<stdio.h>

void merge(int arr[], int left, int mid, int right) {
    int len1 = mid - left + 1;
    int len2 = right - mid;

    int leftArr[len1];
    int rightArr[len2];

    for (int i = 0; i < len1; i++)
        leftArr[i] = arr[left + i];
    for (int j = 0; j < len2; j++)
        rightArr[j] = arr[mid + 1 + j];

    int i, j, k;
    i = 0;
    j = 0;
    k = left;

    while (i < len1 && j < len2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    while (i < len1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    while (j < len2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int start, int right) {
    if (start < right) {
        int mid = (start + right) / 2;
        mergeSort(arr, start, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, start, mid, right);
    }
}

void display(int arr[], int n) {
    for (int i = 0; i < n; ++i)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr[] = {6, 5, 12, 10, 9, 1};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array\n");
    display(arr, n);

    mergeSort(arr, 0, n - 1);

    printf("Sorted array\n");
    display(arr, n);

    return 0;
}
